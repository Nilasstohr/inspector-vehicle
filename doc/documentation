Installation of Teensy software
--------------------------------
clone inspector-vehicle project. 
transfer tools folder (stored on flash) to root of vehicle-driver.
Setup teensy linux usb rules: 
	1. download teensy linux usb rules file from "https://www.pjrc.com/teensy/loader_linux.html" to a location e.g downloads
	2. download teensyduino "Download Teensy Program (64 bit)" from same page link as above place it to downloads. 
	3. open terminal 
	4. cd downloads
	5. execute command 
		sudo cp 00-teensy.rules /etc/udev/rules.d/
		tar -xvzf teensy_linux64.tar.gz
		./teensy &
	5. from vehicle-driver root open terminal press execute "make" after compilation teensy loader will flash teensy 
	(you may have to press button on teensy first time).  

Eclipse Dev Invironment
-------------------------
	1. install Eclipse IDE for C/C++ Developers
	2. files -> new -> Makefile project with exsisting code
	3. name project "vechicle driver"
	4. At section "Exsisting Code Location" browse to "vehicle-driver" project located at repo
	  "inspector-vehicle"
	5. at section "toolchain for indexer Settings" choose "Cross GCC"
	6. finish


	Add Defines to eclipse project
	project properties -> search for "paths and symbols" -> in symbol tab -> choose GNU C++
	1. add symbol "_MK20DX256_" (dependending on platform)
	2. add symbol "F_CPU" with value "48000000"

Ros2 and Clion

General Process

Terminal 1. ( source underlay "source /opt/ros/foxy/setup.bash" )
-----------------------------------------------------------------
-Create Workspace

-Clone desired repos in src / create a new package

-Resolve dependencies in workspace root

-build workspace ( following dir will be created "build  install  log  src")
	Install contains workspace setup files "source overlay"
	Build is where your packeges build result are placed. 

Terminal 2. ( source underlay "source /opt/ros/foxy/setup.bash" )
-----------------------------------------------------------------
* Source overlay (from your workspace ". install/local_setup.bash")
* Modify overlay (then from Terminal 1 Build workspace)

Clion
	1. Create ros workspace e.g dev_ws and create package e.g my_package and perform build with
	   "colcon build --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja" 
	2. Open a terminal, source overlay (se above *) in worspace, then navigatet to CLion-XXX.X.X/bin execute 
           "./clion.sh" to run CLion.
	3. if previously clion project is open, close it from file -> close project
	4. From here a welcome will popup will be seen, choose "open" and point to ros2 target package (e.g 
	   my_package) created in step1.
	5. A project wizard will popup with a default "debug profile". In toolchain field make sure "use default system" is chosen.
	   if not present add it from "manage toolchain"
	6. In "Build directory" point to ros2 target package build directory e.g from "dev_ws/build/my_pacakge" and click 
	   OK. Now you will have all target nodes from package project as run/debug configurations. 
	
	dont do step 6!!!! 
	6. To build ros workspace from within Clion first open "Run/Debug Configurations" 
	   and remove default "Build" task under "Before launch" 
           then press the + sign (still under Before launch) this will popup some add options, 
           choose "External Tools" Called e.g "Colcon Build" in the tool insert "colcon" as program 
	   "build" as argument and working directory to ros workspace. 


Added rplidar SDK to ros package
--------------------------------------------------------------------
	1.open terminal in target package folder then perform 
	"git clone https://github.com/Slamtec/rplidar_sdk.git" this will create a folder "rplidar_sdk"
	2. In target package create a folder called "sdk" a copy the "include" and "src" folder   
	   from "rplidar_sdk->sdk" into it. 
	3. Now add the below to the target package CMakeLists.txt
		3.1
			set(RPLIDAR_SDK_PATH "./sdk/")
		3.2
			FILE(GLOB RPLIDAR_SDK_SRC
			  "${RPLIDAR_SDK_PATH}/src/arch/linux/*.cpp"
			  "${RPLIDAR_SDK_PATH}/src/hal/*.cpp"
			  "${RPLIDAR_SDK_PATH}/src/*.cpp"
			)
		3.3
			Add ${RPLIDAR_SDK_SRC} to any "add_executable" where you need the sdk e.g
			add_executable(my_package src/my_package.cpp ${RPLIDAR_SDK_SRC})
	5. if started close Clion and Perform "Clion" guide above (!!! remember to run "sudo chmod 666 /dev/ttyUSB0" before starting Clion)

inspiration from:
git clone https://github.com/slamtec/rplidar_ros 
https://github.com/CreedyNZ/rplidar_ros2 

Viewing laser scan in RVIZ
--------------------------------------------------------------------
	1. run the rplidarNode node (https://github.com/CreedyNZ/rplidar_ros2, whick public laser 
	   scanner data over a topic /scan) by commmand "ros2 run rplidar_ros rplidarNode node"
	2. From a new terminal run "ros2 topic list -t" you see /scan topic
	3. run "ros2 pkg executables" to verify that rviz2 exists then run the node rviz by 
	   "ros2 run rviz2 rviz2"
	4.  Add a new display and choose "LaserScan" set the topic name "/scan" and in global 
	    options set Fixed Frame to "laser_frame" also Size(m) to 0,05



Import ros2 project to pycharm
----------------------------------------------------------------------------
1. open python package in pycharm
2. go to setting -> project -> project struture -> add root content
   -> navigate tp "/opt/ros/foxy/lib/python3.8/site-packages" and add. 

inspiration
https://www.youtube.com/watch?v=lTew9mbXrAs

Grand access to usb 
-------------------------------------------------------------------------
SerialPort fra linux
name = /dev/ttyACM0

links:

ros 2 documentaion
------------------------------

Api Documentaion
------------------------------
https://docs.ros2.org/latest/api/rclcpp/

c++
https://docs.ros2.org/foxy/api/rclcpp/
python
https://docs.ros2.org/foxy/api/rclpy/


C++ documentation
------------------------------
https://en.cppreference.com/w/cpp


Server/client between two linuc pc
----------------------------------
https://ubuntu.com/server/docs/service-openssh


remote to build/deploy to linux via clion
-------------------------------------------
https://www.jetbrains.com/help/clion/remote-projects-support.html


Add ssh key to between pc and host
---------------------------------------------
follow guide below: 
(!!! dont use sudo, and open terminal from home, when cloning use ssh NOT https)
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent (!!! remember to type in a passphase, important )


PWM on teeensy
---------------------------------------------
https://www.pjrc.com/teensy/td_pulse.html


Open UPS
----------------------------------------------------
https://www.mini-box.com/OpenUPS			


remote from window
---------------------------------------------
https://help.ubuntu.com/community/xrdp
https://www.youtube.com/watch?v=lhYZYAOobc4
https://www.youtube.com/watch?v=Hf_ZZu9yO3Y

filtering
---------------------------------------------
https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.butter.html
https://www.tutorialspoint.com/how-to-remove-scientific-notation-from-a-matplotlib-log-log-plot
https://stackoverflow.com/questions/25191620/creating-lowpass-filter-in-scipy-understanding-methods-and-units


robot dictionary
---------------------------------------------------------------

	mobile robot kinematicts (differential wheel)
	--------------------------------------
	forward kinematics - from pose termi
	inverse kinematics - 
	
	Mobile robot localizatiob
	--------------------------------------
	side 270-274 
	side 336-342

bluetooth connection
------------------------------------
https://howtomechatronics.com/tutorials/arduino/how-to-configure-pair-two-hc-05-bluetooth-module-master-slave-commands/
https://www.google.com/search?q=how+to+pair+two+ht05+bluetooth+module&sca_esv=567971749&sxsrf=AM9HkKndpCyzh0jOjTkJjTS4IuGWoafsYw%3A1695550083197&ei=gwoQZeDBC-mTxc8PyfK8sAk&oq=how+to+pair+two+ht05+bluetooth+m&gs_lp=Egxnd3Mtd2l6LXNlcnAiIGhvdyB0byBwYWlyIHR3byBodDA1IGJsdWV0b290aCBtKgIIADIFECEYoAEyBRAhGKABMgUQIRigAUj2TVDiD1j7PnABeAGQAQCYAaQBoAGEA6oBAzAuM7gBA8gBAPgBAcICChAAGEcY1gQYsAPiAwQYACBBiAYBkAYI&sclient=gws-wiz-serp#fpstate=ive&vld=cid:0510e341,vid:FcIQVX8stzY,st:0


Rf24
-------------------------------------------
https://howtomechatronics.com/tutorials/arduino/arduino-wireless-communication-nrf24l01-tutorial/
https://www.rhydolabz.com/wiki/?p=15956

ros2
----------------------------------------------
. install/setup.bash
source /opt/ros/foxy/setup.bash
colcon build --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja

ubuntu installation
---------------------------
1. download rufus
2. download unbuntu of choose
3. open disk managment on window press "windows+x"
4. Locate the Window sdd partition (0) and delete primary partition if present. (old ubuntu)
(if you end up in nasty grub menu after reboot of window, type reboot and continuouly preess F12 to get into boot menu)
5. Right click on Window sdd partition and shrink volume, this will allocate memory for future
installation. 
6. Connect and bootable harddrev and open Rufus, update hardware list by "ALT+F" choose the connected harddrev and the downloaded ubuntu version then press start. 
(!!! notice when asked you may have to choose to flash dd version iso, because your device will not show in boot menu with iso. You may also have to diable secrue boot this is done restarting pc then continuously press F12 use menu's from here)
7. To install ubuntu, go intro boot menu of PC, this can be done in two ways:
restart + shift (window 11) or restart PC then continuosly press F12, choose harddrev for the rest should be streight forward.



install eagle for pcb
---------------------------
1. install Eagle from:
	https://www.autodesk.com/products/fusion-360/blog/how-to-install-autodesk-eagle-on-windows-mac-and-linux/

2. when you open the app you will run into problems, see solution for the below:
	https://forums.autodesk.com/t5/eagle-forum/running-eagle-on-fedora-33-dialogs-fail-display-properly-appears/m-p/10374674/highlight/true#M34418
	
3. from control panel choose Options (tabs dropdown) -> Directories and add directory we the project should located. 

5. get teensy 4.1 eagle libraries from 
https://github.com/eagleman1022/Eagle-Library-Teensy

6. Create Project and schematic then open the schematic

7. open Library manager -> available -> browse to teenst eagle pcb and find the and press 'use' button. close manager.

8. in schematic file, from search field type "add" and enter which will open libraries. Search for teensy -> 4.1 and import to schematics. 

9. in the library con-lstb the standart hole through pads can be found.





